#!/usr/bin/env ruby

require 'optparse'

require File.expand_path( File.join( File.dirname(__FILE__), '..', 'lib', 'kerbaldyn' ) )

module KerbalDyn
  class Application

    def initialize(argv)
      @command, *@args = argv
      @ioout = STDOUT
      @ioerr = STDERR
    end

    attr_reader :command
    attr_reader :args
    attr_reader :error

    attr_reader :ioout
    attr_reader :ioerr

    def run
      begin
        dispatch
      rescue Exception => e
        @error = e
        ioerr.puts "ERROR: #{e.message}"
        ioerr.puts e.backtrace.join("\n")
      end
    end

    def dispatch
      #TODO: Figure out the patterns in argument processing and how to extract that.
      case command
      when 'info'
        planet = args.first.downcase
        raise ArgumentError, "Unknown planet #{planet}." unless KerbalDyn::Planetoid.planetoid_methods.include?(planet.to_sym)
        planetoid = KerbalDyn::Planetoid.send(planet)
        orbit = KerbalDyn::Orbit.send(planet)
        ioout.puts "PLANETOID"
        ioout.puts [:name, :gravitational_parameter, :radius, :rotational_period, :surface_gravity].map {|method| "#{method.to_s.rjust(32)}: #{planetoid.send(method).inspect.rjust(20)}"}.join("\n")
        ioout.puts "ORBIT"
        ioout.puts [:apoapsis, :periapsis, :period, :mean_velocity, :sphere_of_influence].map {|method| "#{method.to_s.rjust(32)}: #{orbit.send(method).inspect.rjust(20)}"}.join("\n")
      when 'leadangle'
        initial_orbit = KerbalDyn::Orbit.from_string( args[0] )
        final_orbit = KerbalDyn::Orbit.from_string( args[1] )
        maneuver = KerbalDyn::OrbitalManeuver::Hohmann.new(initial_orbit, final_orbit)
        ioout.puts "LEAD ANGLE: #{'%0.4f' % (maneuver.mean_lead_angle * 180.0 / Math::PI)} deg"
        ioout.puts "DELTA V   : #{'%0.1f' % maneuver.delta_v} m/s"
        ioout.puts "DELTA T   : #{maneuver.delta_t.round} sec"
        formatted_velocities = maneuver.velocities.map do |init,fin|
          "#{'%0.1f' % init} --> #{'%0.1f' % fin.round}"
        end.join(';  ')
        ioout.puts "VELOCITIES: #{formatted_velocities}"
      when 'transfer'
        # It seems as though if r_final / r_initial < 13(ish), then hohmann always wins, and when > 15(ish) bielliptic always wins?
        initial_orbit = KerbalDyn::Orbit.from_string( args[0] )
        final_orbit=  KerbalDyn::Orbit.from_string( args[1] )

        puts "HOHMANN:"
        hohmann = KerbalDyn::OrbitalManeuver::Hohmann.new(initial_orbit, final_orbit)
        ioout.puts( [:delta_v, :delta_t].each_with_object({}) {|parameter, map| map[parameter] = hohmann.send(parameter).round}.inspect )

        puts ""
        puts "BIELLIPTIC:"
        min_radius = [initial_orbit.semimajor_axis, final_orbit.semimajor_axis].max
        max_radius = initial_orbit.primary_body_sphere_of_influence
        n = 1000
        biellipticals = (0..n).map do |i|
          #radius = (i/n.to_f)*(max_radius - min_radius) + min_radius
          radius = (i/n.to_f)*(19*min_radius) + min_radius
          bielliptic = KerbalDyn::OrbitalManeuver::Bielliptic.new(initial_orbit, final_orbit, :transfer_radius => radius)
          #ioout.puts( ([i, radius/min_radius] + [:transfer_radius, :delta_v, :delta_t].map {|parameter| bielliptic.send(parameter).round}).inspect )
          bielliptic
        end

        surface_radius = initial_orbit.primary_body.radius
        min_delta_v = biellipticals.map {|bielliptic| bielliptic.delta_v}.min
        biellipticals.select do |bielliptic|
          (bielliptic.delta_v - min_delta_v).abs < 1.0
        end.min_by do |bielliptic|
          bielliptic.delta_v
        end.tap do |bielliptic|
          ioout.puts( [:delta_v, :delta_t, :transfer_radius].each_with_object({}) {|parameter,map| map[parameter] = bielliptic.send(parameter).round}.inspect )
        end
      when 'partlist'
          ioout.puts( "parlist not yet implemented." )
      end
    end

  end
end

KerbalDyn::Application.new(ARGV).run
